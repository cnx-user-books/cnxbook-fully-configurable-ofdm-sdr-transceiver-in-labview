<document xmlns="http://cnx.rice.edu/cnxml">

<title>Add Cyclic Prefix (Transmitter) (LabVIEW)</title>
<metadata xmlns:md="http://cnx.rice.edu/mdml">
  <md:content-id>m34119</md:content-id>
  <md:title>Add Cyclic Prefix (Transmitter) (LabVIEW)</md:title>
  <md:abstract>This module discusses the cyclic prefix in the OFDM transmitter, both why it is needed and how it can be constructed in a LabVIEW environment. It contains the block diagram, instructional video, and file available for download.</md:abstract>
  <md:uuid>dc7d3469-29a9-415f-87b4-e77584ca9162</md:uuid>
</metadata>

<content>
  <para id="delete_me">

<figure id="help">
  <title>Input/Outputs and Help</title>
  <media id="cyc_help" display="block" alt="Cyclic Prefix Inputs/Outputs and Help in LabVIEW">  
     <image mime-type="image/png" src="../../media/cyc_help.png"/>
  </media>
  <caption>This is the LabVIEW help and block description for the cyclic prefix sub-VI.</caption>
</figure>
</para>

<para id="fs-id34053590">The Cyclic Prefix sub-VI in the OFDM transmitter is shown above in Figure 1. The theory behind the cyclic prefix is rather intuitive. Leading up to this module, we have one complete period of a complex baseband OFDM symbol. However, depending on the channel, we may have significant multipath fading. In order to combat channels with delays, we need a guard interval. This is essentially an interval in the transmission that we will eventually throw out. For more complete treatment on multipath channel models and why guard intervals are effective, <link url="http://www.dsplog.com/2008/02/17/cylcic-prefix-in-orthogonal-frequency-division-multiplexing/">Krishna Sankar does a terrific job in his blog entry</link>.</para>

<para id="fs-id29379547">The procedure is very simple. Some percentage of the end of the signal is copied and added to the front. This doesn't create any discontinuities because the next point after the end of the signal is the beginning of the signal since we have exactly one period. Thus any portion of the end of the signal we copy to the front of the signal will add without discontinuity. If this is still difficult to see, imagine copying and pasting a full period of a sine wave to the start, so we now have two periods of that sine wave. Now imagine deleting 1/4 of the points at the beginning of the new signal. It's easy to see that nothing unorthodox is going on here, and you've effectively created a cyclic prefix of 0.5 or 50%. Now it's easy to generalize this to any arbitrary signal, as long as we have exactly one period.</para>

<para id="fs-id33938971">
<figure id="layout">
  <title>Block Diagram Layout</title>
  <media id="cyc_layout" display="block" alt="Cyclic Prefix Layout Block Diagram in LabVIEW">  
     <image mime-type="image/png" src="../../media/cyc_layout.png"/>
  </media>
  <caption>This is the LabVIEW block diagram for the cyclic prefix sub-VI.</caption>
</figure>
</para><para id="fs-id18908739">
Here, Figure 2 shows a LabVIEW implementation of what we just described. It is available for download below. The only subtleties here mainly deal with user friendly-ness. The module accepts a ratio between 0 and 1 representing a percentage between 0 and 100%. We then take the complement of this ratio in order to properly split the array. So our ratio is created by 1-(perc/100). This is because LabVIEW's built in function split array takes as an input the point in the array at which we wish to split. Thus if we want 75% prefix, since we work from the end of the signal and move towards the start, we want to break at the 25% point of the signal and take the second half. This ratio is thus multiplied by the total signal length and the break point is calculated.</para>

<para id="fs-id1164304202892">The portion that is extracted is then concatenated to the original input signal, and our prefixed signal is complete. One sticking point is to ensure that when the "Build Array" function is invoked, that you right-click the block and choose "Concatenate Inputs" so that the arrays are properly joined. For all general questions, check out the instructional video below in Figure 3, the example use video in Figure 4, or email the author for more information.</para>

<para id="fs-id1164298671449">
<figure id="movie"><title>Instructional Video</title><media id="yt-media" display="block" alt="LabVIEW Tutorial on Constructing a Cyclic Prefix Sub-VI">
 
  <flash id="yt-video" mime-type="application/x-shockwave-flash" src="http://www.youtube.com/v/Zykhdaw_YkI&amp;hl=en&amp;fs=1&amp;rel=0" width="640" height="505">
   <param name="allowscriptaccess" value="always"/>
   <param name="allowsfullscreen" value="true"/>
  </flash>
 </media>

<caption>This is the instructional video for constructing the cyclic prefix sub-VI.</caption></figure>
</para>

<para id="fs-id1171264807595">
<figure id="movie2"><title>Example Video</title><media id="yt-media2" display="block" alt="LabVIEW Example on using the Cyclic Prefix Sub-VI">

  <flash id="yt-video2" mime-type="application/x-shockwave-flash" src="http://www.youtube.com/v/BzN5nWRsslA&amp;hl=en&amp;fs=1&amp;rel=0" width="640" height="505">

   <param name="allowscriptaccess" value="always"/>
   <param name="allowsfullscreen" value="true"/>
  </flash>
 </media>

<caption>This is the example video for using the cyclic prefix sub-VI.</caption></figure>
</para>

<para id="fs-id1164299023324">
<link url="cyc.zip"><emphasis>Download This LabVIEW sub-VI</emphasis></link>

  </para>


</content>

</document>